import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath('com.guardsquare:proguard-gradle:7.3.1')
    }
}

apply plugin: 'java'

def pluginName = "FronskySpigotFramework"
def pluginGroup = 'org.example'
def pluginVersion = '1.0.0'
def spigotVersion = '1.13.2'

group = pluginGroup
version = pluginVersion

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:${spigotVersion}-R0.1-SNAPSHOT"
    compileOnly 'org.projectlombok:lombok:1.18.24'

    implementation 'com.guardsquare:proguard-gradle:7.3.1'
    implementation 'com.google.code.gson:gson:2.10.1'

    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

jar {
    manifest {
        attributes('Created-By': "Gradle ${getGradle().getGradleVersion()}")
        attributes('Built-By': 'IntelliJ IDEA')
        attributes('Developed-By': 'Fronsky')
        attributes('Build-JDK': targetJavaVersion)
        attributes('Plugin-Name': pluginName)
        attributes('Plugin-Version': pluginVersion)
        attributes('Automatic-Plugin-Name': "${pluginGroup}.${pluginName.toLowerCase()}.Main")
    }
    archiveBaseName.set(pluginName)
    archiveVersion.set(pluginVersion)
}

wrapper {
    gradleVersion = '7.6'
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [name: pluginName, main: "${pluginGroup}.${pluginName.toLowerCase()}.Main", version: pluginVersion]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.register('ProguardTask', ProGuardTask) {
    configuration 'proguard.cfg'
}